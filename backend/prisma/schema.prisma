generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  passwordHash String
  role         Role
  createdAt    DateTime  @default(now())

  problems     Problem[]       @relation("CreatedProblems")
  quizzes      Quiz[]          @relation("CreatedQuizzes")
  submissions  Submission[]
  quizAnswers  QuizSubmission[]
  progress     Progress[]

  Comment Comment[]
}

enum Role {
  student
  professor
}
model Example {
  id          Int     @id @default(autoincrement())
  input       String
  output      String
  explanation String?
  problem     Problem @relation(fields: [problemId], references: [id])
  problemId   Int
}

model Problem {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  difficulty  Difficulty
  starterCode String
  constraints String[]  // You may need to check if this is persisted correctly
  createdAt   DateTime  @default(now())
  createdBy   User?     @relation("CreatedProblems", fields: [createdById], references: [id])
  createdById Int?
  submissions   Submission[]
  progress      Progress[]
  Example Example[]
  isDeleted  Boolean   @default(false)

  Comment Comment[]
}
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId Int

  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

enum Difficulty {
  easy
  medium
  hard
}

model Submission {
  id         Int      @id @default(autoincrement())
  code       String
  language   String   @default("java")
  status     String   @default("pending")
  output     String?
  isCorrect  Boolean?
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  userId     Int

  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  Int
}

model Quiz {
  id         Int      @id @default(autoincrement())
  title      String
  createdAt  DateTime @default(now())

  createdBy   User?    @relation("CreatedQuizzes", fields: [createdById], references: [id])
  createdById Int?

  questions   QuizQuestion[]
  submissions QuizSubmission[]
}

model QuizQuestion {
  id           Int    @id @default(autoincrement())
  quiz         Quiz   @relation(fields: [quizId], references: [id])
  quizId       Int

  questionText String
  optionA      String
  optionB      String
  optionC      String
  optionD      String
  correctOption String

  QuizSubmission QuizSubmission[]
}

model QuizSubmission {
  id             Int    @id @default(autoincrement())
  user           User   @relation(fields: [userId], references: [id])
  userId         Int

  quiz           Quiz   @relation(fields: [quizId], references: [id])
  quizId         Int

  question       QuizQuestion @relation(fields: [questionId], references: [id])
  questionId     Int

  selectedOption String
  isCorrect      Boolean
  answeredAt     DateTime @default(now())
}

model Progress {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int

  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  Int

  solvedAt   DateTime @default(now())
}

